function [covarEst,uEst] = pred_step(uPrev,covarPrev,angVel,acc,dt)
%covarPrev and uPrev are the previous mean and covariance respectively
%angVel is the angular velocity
%acc is the acceleration
%dt is the sampling time
roll = uPrev(4,1); pitch = uPrev(5,1); yaw = uPrev(6,1); vx = uPrev(7,1); vy = uPrev(8,1); vz = uPrev(9,1);
bg_x = uPrev(10,1); bg_y = uPrev(11,1); bg_z = uPrev(12,1); ba_x = uPrev(13,1); ba_y = uPrev(14,1); ba_z = uPrev(15,1);
wm_x = angVel(1,1); wm_y = angVel(2,1); wm_z = angVel(3,1); am_x = acc(1,1); am_y = acc(2,1); am_z = acc(3,1);

% x_dot = [vx; vy; vz; - (cos(yaw)*(bg_x - wm_x))/cos(pitch) - (sin(yaw)*(bg_y - wm_y))/cos(pitch); sin(yaw)*(bg_x - wm_x) - cos(yaw)*(bg_y - wm_y); wm_z - bg_z - (cos(yaw)*sin(pitch)*(bg_x - wm_x))/cos(pitch) - (sin(pitch)*sin(yaw)*(bg_y - wm_y))/cos(pitch); (am_z - ba_z)*(sin(roll)*sin(yaw) + cos(roll)*cos(yaw)*sin(pitch)) - (am_y - ba_y)*(cos(roll)*sin(yaw) - cos(yaw)*sin(pitch)*sin(roll)) + cos(pitch)*cos(yaw)*(am_x - ba_x); (am_y - ba_y)*(cos(roll)*cos(yaw) + sin(pitch)*sin(roll)*sin(yaw)) - (am_z - ba_z)*(cos(yaw)*sin(roll) - cos(roll)*sin(pitch)*sin(yaw)) + cos(pitch)*sin(yaw)*(am_x - ba_x); cos(pitch)*cos(roll)*(am_z - ba_z) - sin(pitch)*(am_x - ba_x) + cos(pitch)*sin(roll)*(am_y - ba_y) - (981/100); 0; 0; 0; 0; 0; 0]; 
% At = [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, - (cos(yaw)*sin(pitch)*(bg_x - wm_x))/cos(pitch)^2 - (sin(pitch)*sin(yaw)*(bg_y - wm_y))/cos(pitch)^2, (sin(yaw)*(bg_x - wm_x))/cos(pitch) - (cos(yaw)*(bg_y - wm_y))/cos(pitch), 0, 0, 0, -cos(yaw)/cos(pitch), -sin(yaw)/cos(pitch), 0, 0, 0, 0; 0, 0, 0, 0, 0, cos(yaw)*(bg_x - wm_x) + sin(yaw)*(bg_y - wm_y), 0, 0, 0, sin(yaw), -cos(yaw), 0, 0, 0, 0; 0, 0, 0, 0, - cos(yaw)*(bg_x - wm_x) - sin(yaw)*(bg_y - wm_y) - (cos(yaw)*sin(pitch)^2*(bg_x - wm_x))/cos(pitch)^2 - (sin(pitch)^2*sin(yaw)*(bg_y - wm_y))/cos(pitch)^2, (sin(pitch)*sin(yaw)*(bg_x - wm_x))/cos(pitch) - (cos(yaw)*sin(pitch)*(bg_y - wm_y))/cos(pitch), 0, 0, 0, -(cos(yaw)*sin(pitch))/cos(pitch), -(sin(pitch)*sin(yaw))/cos(pitch), -1, 0, 0, 0; 0, 0, 0, (am_y - ba_y)*(sin(roll)*sin(yaw) + cos(roll)*cos(yaw)*sin(pitch)) + (am_z - ba_z)*(cos(roll)*sin(yaw) - cos(yaw)*sin(pitch)*sin(roll)), cos(pitch)*cos(roll)*cos(yaw)*(am_z - ba_z) - cos(yaw)*sin(pitch)*(am_x - ba_x) + cos(pitch)*cos(yaw)*sin(roll)*(am_y - ba_y), (am_z - ba_z)*(cos(yaw)*sin(roll) - cos(roll)*sin(pitch)*sin(yaw)) - (am_y - ba_y)*(cos(roll)*cos(yaw) + sin(pitch)*sin(roll)*sin(yaw)) - cos(pitch)*sin(yaw)*(am_x - ba_x), 0, 0, 0, 0, 0, 0, -cos(pitch)*cos(yaw), (cos(roll)*sin(yaw) - cos(yaw)*sin(pitch)*sin(roll)), - sin(roll)*sin(yaw) - cos(roll)*cos(yaw)*sin(pitch); 0, 0, 0, - (am_y - ba_y)*(cos(yaw)*sin(roll) - cos(roll)*sin(pitch)*sin(yaw)) - (am_z - ba_z)*(cos(roll)*cos(yaw) + sin(pitch)*sin(roll)*sin(yaw)), cos(pitch)*cos(roll)*sin(yaw)*(am_z - ba_z) - sin(pitch)*sin(yaw)*(am_x - ba_x) + cos(pitch)*sin(roll)*sin(yaw)*(am_y - ba_y), (am_z - ba_z)*(sin(roll)*sin(yaw) + cos(roll)*cos(yaw)*sin(pitch)) - (am_y - ba_y)*(cos(roll)*sin(yaw) - cos(yaw)*sin(pitch)*sin(roll)) + cos(pitch)*cos(yaw)*(am_x - ba_x), 0, 0, 0, 0, 0, 0, -cos(pitch)*sin(yaw), - cos(roll)*cos(yaw) - sin(pitch)*sin(roll)*sin(yaw), (cos(yaw)*sin(roll) - cos(roll)*sin(pitch)*sin(yaw)); 0, 0, 0, cos(pitch)*cos(roll)*(am_y - ba_y) - cos(pitch)*sin(roll)*(am_z - ba_z), - cos(pitch)*(am_x - ba_x) - cos(roll)*sin(pitch)*(am_z - ba_z) - sin(pitch)*sin(roll)*(am_y - ba_y), 0, 0, 0, 0, 0, 0, 0, sin(pitch), -cos(pitch)*sin(roll), -cos(pitch)*cos(roll); 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
% Ut = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; -cos(yaw)/cos(pitch), -sin(yaw)/cos(pitch), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; sin(yaw), -cos(yaw), 0, 0, 0, 0, 0, 0, 0, 0, 0, 0; -(cos(yaw)*sin(pitch))/cos(pitch), -(sin(pitch)*sin(yaw))/cos(pitch), -1, 0, 0, 0, 0, 0, 0, 0, 0, 0; 0, 0, 0, -cos(pitch)*cos(yaw), cos(roll)*sin(yaw) - cos(yaw)*sin(pitch)*sin(roll), - sin(roll)*sin(yaw) - cos(roll)*cos(yaw)*sin(pitch), 0, 0, 0, 0, 0, 0; 0, 0, 0, -cos(pitch)*sin(yaw), - cos(roll)*cos(yaw) - sin(pitch)*sin(roll)*sin(yaw), cos(yaw)*sin(roll) - cos(roll)*sin(pitch)*sin(yaw), 0, 0, 0, 0, 0, 0; 0, 0, 0, sin(pitch), -cos(pitch)*sin(roll), -cos(pitch)*cos(roll), 0, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1];
x_dot = [vx; vy; vz; ((sin(yaw)*(cos(yaw)*sin(roll) - cos(roll)*sin(pitch)*sin(yaw)))/cos(pitch) - (cos(yaw)*(sin(roll)*sin(yaw) + cos(roll)*cos(yaw)*sin(pitch)))/cos(pitch))*(bg_z - wm_z) - ((sin(yaw)*(cos(roll)*cos(yaw) + sin(pitch)*sin(roll)*sin(yaw)))/cos(pitch) - (cos(yaw)*(cos(roll)*sin(yaw) - cos(yaw)*sin(pitch)*sin(roll)))/cos(pitch))*(bg_y - wm_y) - (bg_x - wm_x)*(cos(yaw)^2 + sin(yaw)^2); (bg_z - wm_z)*(cos(yaw)*(cos(yaw)*sin(roll) - cos(roll)*sin(pitch)*sin(yaw)) + sin(yaw)*(sin(roll)*sin(yaw) + cos(roll)*cos(yaw)*sin(pitch))) - (bg_y - wm_y)*(cos(yaw)*(cos(roll)*cos(yaw) + sin(pitch)*sin(roll)*sin(yaw)) + sin(yaw)*(cos(roll)*sin(yaw) - cos(yaw)*sin(pitch)*sin(roll))); - (bg_z - wm_z)*(cos(pitch)*cos(roll) + (cos(yaw)*sin(pitch)*(sin(roll)*sin(yaw) + cos(roll)*cos(yaw)*sin(pitch)))/cos(pitch) - (sin(pitch)*sin(yaw)*(cos(yaw)*sin(roll) - cos(roll)*sin(pitch)*sin(yaw)))/cos(pitch)) - (bg_y - wm_y)*(cos(pitch)*sin(roll) - (cos(yaw)*sin(pitch)*(cos(roll)*sin(yaw) - cos(yaw)*sin(pitch)*sin(roll)))/cos(pitch) + (sin(pitch)*sin(yaw)*(cos(roll)*cos(yaw) + sin(pitch)*sin(roll)*sin(yaw)))/cos(pitch)) - (bg_x - wm_x)*(sin(pitch)*cos(yaw)^2 + sin(pitch)*sin(yaw)^2 - sin(pitch)); (am_z - ba_z)*(sin(roll)*sin(yaw) + cos(roll)*cos(yaw)*sin(pitch)) - (am_y - ba_y)*(cos(roll)*sin(yaw) - cos(yaw)*sin(pitch)*sin(roll)) + cos(pitch)*cos(yaw)*(am_x - ba_x); (am_y - ba_y)*(cos(roll)*cos(yaw) + sin(pitch)*sin(roll)*sin(yaw)) - (am_z - ba_z)*(cos(yaw)*sin(roll) - cos(roll)*sin(pitch)*sin(yaw)) + cos(pitch)*sin(yaw)*(am_x - ba_x); cos(pitch)*cos(roll)*(am_z - ba_z) - sin(pitch)*(am_x - ba_x) + cos(pitch)*sin(roll)*(am_y - ba_y) - (981/100); (0); (0); (0); (0); (0); (0)];
% x_dot = [vx; vy; vz; - (cos(yaw)*(bg_x - wm_x))/cos(pitch) - (sin(yaw)*(bg_y - wm_y))/cos(pitch); sin(yaw)*(bg_x - wm_x) - cos(yaw)*(bg_y - wm_y); wm_z - bg_z - (cos(yaw)*sin(pitch)*(bg_x - wm_x))/cos(pitch) - (sin(pitch)*sin(yaw)*(bg_y - wm_y))/cos(pitch); (am_z - ba_z)*(sin(roll)*sin(yaw) + cos(roll)*cos(yaw)*sin(pitch)) - (am_y - ba_y)*(cos(roll)*sin(yaw) - cos(yaw)*sin(pitch)*sin(roll)) + cos(pitch)*cos(yaw)*(am_x - ba_x); (am_y - ba_y)*(cos(roll)*cos(yaw) + sin(pitch)*sin(roll)*sin(yaw)) - (am_z - ba_z)*(cos(yaw)*sin(roll) - cos(roll)*sin(pitch)*sin(yaw)) + cos(pitch)*sin(yaw)*(am_x - ba_x); cos(pitch)*cos(roll)*(am_z - ba_z) - sin(pitch)*(am_x - ba_x) + cos(pitch)*sin(roll)*(am_y - ba_y) - (981/100); 0; 0; 0; 0; 0; 0]; 
At = [(0), (0), (0), (0), (0), (0), (1), (0), (0), (0), (0), (0), (0), (0), (0); (0), (0), (0), (0), (0), (0), (0), (1), (0), (0), (0), (0), (0), (0), (0); (0), (0), (0), (0), (0), (0), (0), (0), (1), (0), (0), (0), (0), (0), (0); (0), (0), (0), ((sin(yaw)*(cos(yaw)*sin(roll) - cos(roll)*sin(pitch)*sin(yaw)))/cos(pitch) - (cos(yaw)*(sin(roll)*sin(yaw) + cos(roll)*cos(yaw)*sin(pitch)))/cos(pitch))*(bg_y - wm_y) + ((sin(yaw)*(cos(roll)*cos(yaw) + sin(pitch)*sin(roll)*sin(yaw)))/cos(pitch) - (cos(yaw)*(cos(roll)*sin(yaw) - cos(yaw)*sin(pitch)*sin(roll)))/cos(pitch))*(bg_z - wm_z), - (bg_z - wm_z)*(cos(roll)*cos(yaw)^2 + cos(roll)*sin(yaw)^2 + (cos(yaw)*sin(pitch)*(sin(roll)*sin(yaw) + cos(roll)*cos(yaw)*sin(pitch)))/cos(pitch)^2 - (sin(pitch)*sin(yaw)*(cos(yaw)*sin(roll) - cos(roll)*sin(pitch)*sin(yaw)))/cos(pitch)^2) - (bg_y - wm_y)*(cos(yaw)^2*sin(roll) + sin(roll)*sin(yaw)^2 - (cos(yaw)*sin(pitch)*(cos(roll)*sin(yaw) - cos(yaw)*sin(pitch)*sin(roll)))/cos(pitch)^2 + (sin(pitch)*sin(yaw)*(cos(roll)*cos(yaw) + sin(pitch)*sin(roll)*sin(yaw)))/cos(pitch)^2), (0), (0), (0), (0), - cos(yaw)^2 - sin(yaw)^2, (cos(yaw)*(cos(roll)*sin(yaw) - cos(yaw)*sin(pitch)*sin(roll)))/cos(pitch) - (sin(yaw)*(cos(roll)*cos(yaw) + sin(pitch)*sin(roll)*sin(yaw)))/cos(pitch), ((sin(yaw)*(cos(yaw)*sin(roll) - cos(roll)*sin(pitch)*sin(yaw)))/cos(pitch) - (cos(yaw)*(sin(roll)*sin(yaw) + cos(roll)*cos(yaw)*sin(pitch)))/cos(pitch)), (0), (0), (0); (0), (0), (0), (bg_y - wm_y)*(cos(yaw)*(cos(yaw)*sin(roll) - cos(roll)*sin(pitch)*sin(yaw)) + sin(yaw)*(sin(roll)*sin(yaw) + cos(roll)*cos(yaw)*sin(pitch))) + (bg_z - wm_z)*(cos(yaw)*(cos(roll)*cos(yaw) + sin(pitch)*sin(roll)*sin(yaw)) + sin(yaw)*(cos(roll)*sin(yaw) - cos(yaw)*sin(pitch)*sin(roll))), (0), (0), (0), (0), (0), (0), - cos(yaw)*(cos(roll)*cos(yaw) + sin(pitch)*sin(roll)*sin(yaw)) - sin(yaw)*(cos(roll)*sin(yaw) - cos(yaw)*sin(pitch)*sin(roll)), (cos(yaw)*(cos(yaw)*sin(roll) - cos(roll)*sin(pitch)*sin(yaw)) + sin(yaw)*(sin(roll)*sin(yaw) + cos(roll)*cos(yaw)*sin(pitch))), (0), (0), (0); (0), (0), (0), (bg_z - wm_z)*(cos(pitch)*sin(roll) - (cos(yaw)*sin(pitch)*(cos(roll)*sin(yaw) - cos(yaw)*sin(pitch)*sin(roll)))/cos(pitch) + (sin(pitch)*sin(yaw)*(cos(roll)*cos(yaw) + sin(pitch)*sin(roll)*sin(yaw)))/cos(pitch)) - (bg_y - wm_y)*(cos(pitch)*cos(roll) + (cos(yaw)*sin(pitch)*(sin(roll)*sin(yaw) + cos(roll)*cos(yaw)*sin(pitch)))/cos(pitch) - (sin(pitch)*sin(yaw)*(cos(yaw)*sin(roll) - cos(roll)*sin(pitch)*sin(yaw)))/cos(pitch)), - (bg_z - wm_z)*(cos(yaw)*(sin(roll)*sin(yaw) + cos(roll)*cos(yaw)*sin(pitch)) - cos(roll)*sin(pitch) - sin(yaw)*(cos(yaw)*sin(roll) - cos(roll)*sin(pitch)*sin(yaw)) + cos(roll)*cos(yaw)^2*sin(pitch) + cos(roll)*sin(pitch)*sin(yaw)^2 + (cos(yaw)*sin(pitch)^2*(sin(roll)*sin(yaw) + cos(roll)*cos(yaw)*sin(pitch)))/cos(pitch)^2 - (sin(pitch)^2*sin(yaw)*(cos(yaw)*sin(roll) - cos(roll)*sin(pitch)*sin(yaw)))/cos(pitch)^2) - (bg_y - wm_y)*(sin(yaw)*(cos(roll)*cos(yaw) + sin(pitch)*sin(roll)*sin(yaw)) - cos(yaw)*(cos(roll)*sin(yaw) - cos(yaw)*sin(pitch)*sin(roll)) - sin(pitch)*sin(roll) + cos(yaw)^2*sin(pitch)*sin(roll) + sin(pitch)*sin(roll)*sin(yaw)^2 - (cos(yaw)*sin(pitch)^2*(cos(roll)*sin(yaw) - cos(yaw)*sin(pitch)*sin(roll)))/cos(pitch)^2 + (sin(pitch)^2*sin(yaw)*(cos(roll)*cos(yaw) + sin(pitch)*sin(roll)*sin(yaw)))/cos(pitch)^2) - (bg_x - wm_x)*(cos(pitch)*cos(yaw)^2 + cos(pitch)*sin(yaw)^2 - cos(pitch)), (0), (0), (0), (0), - sin(pitch)*cos(yaw)^2 - sin(pitch)*sin(yaw)^2 + sin(pitch), (cos(yaw)*sin(pitch)*(cos(roll)*sin(yaw) - cos(yaw)*sin(pitch)*sin(roll)))/cos(pitch) - cos(pitch)*sin(roll) - (sin(pitch)*sin(yaw)*(cos(roll)*cos(yaw) + sin(pitch)*sin(roll)*sin(yaw)))/cos(pitch), (sin(pitch)*sin(yaw)*(cos(yaw)*sin(roll) - cos(roll)*sin(pitch)*sin(yaw)))/cos(pitch) - (cos(yaw)*sin(pitch)*(sin(roll)*sin(yaw) + cos(roll)*cos(yaw)*sin(pitch)))/cos(pitch) - cos(pitch)*cos(roll), (0), (0), (0); (0), (0), (0), (am_y - ba_y)*(sin(roll)*sin(yaw) + cos(roll)*cos(yaw)*sin(pitch)) + (am_z - ba_z)*(cos(roll)*sin(yaw) - cos(yaw)*sin(pitch)*sin(roll)), cos(pitch)*cos(roll)*cos(yaw)*(am_z - ba_z) - cos(yaw)*sin(pitch)*(am_x - ba_x) + cos(pitch)*cos(yaw)*sin(roll)*(am_y - ba_y), (am_z - ba_z)*(cos(yaw)*sin(roll) - cos(roll)*sin(pitch)*sin(yaw)) - (am_y - ba_y)*(cos(roll)*cos(yaw) + sin(pitch)*sin(roll)*sin(yaw)) - cos(pitch)*sin(yaw)*(am_x - ba_x), (0), (0), (0), (0), (0), (0), -cos(pitch)*cos(yaw), (cos(roll)*sin(yaw) - cos(yaw)*sin(pitch)*sin(roll)), - sin(roll)*sin(yaw) - cos(roll)*cos(yaw)*sin(pitch); (0), (0), (0), - (am_y - ba_y)*(cos(yaw)*sin(roll) - cos(roll)*sin(pitch)*sin(yaw)) - (am_z - ba_z)*(cos(roll)*cos(yaw) + sin(pitch)*sin(roll)*sin(yaw)), cos(pitch)*cos(roll)*sin(yaw)*(am_z - ba_z) - sin(pitch)*sin(yaw)*(am_x - ba_x) + cos(pitch)*sin(roll)*sin(yaw)*(am_y - ba_y), (am_z - ba_z)*(sin(roll)*sin(yaw) + cos(roll)*cos(yaw)*sin(pitch)) - (am_y - ba_y)*(cos(roll)*sin(yaw) - cos(yaw)*sin(pitch)*sin(roll)) + cos(pitch)*cos(yaw)*(am_x - ba_x), (0), (0), (0), (0), (0), (0), -cos(pitch)*sin(yaw), - cos(roll)*cos(yaw) - sin(pitch)*sin(roll)*sin(yaw), (cos(yaw)*sin(roll) - cos(roll)*sin(pitch)*sin(yaw)); (0), (0), (0), cos(pitch)*cos(roll)*(am_y - ba_y) - cos(pitch)*sin(roll)*(am_z - ba_z), - cos(pitch)*(am_x - ba_x) - cos(roll)*sin(pitch)*(am_z - ba_z) - sin(pitch)*sin(roll)*(am_y - ba_y), (0), (0), (0), (0), (0), (0), (0), sin(pitch), -cos(pitch)*sin(roll), -cos(pitch)*cos(roll); (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0); (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0); (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0); (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0); (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0); (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0)];
% At = [(0), (0), (0), (0), (0), (0), (1), (0), (0), (0), (0), (0), (0), (0), (0); (0), (0), (0), (0), (0), (0), (0), (1), (0), (0), (0), (0), (0), (0), (0); (0), (0), (0), (0), (0), (0), (0), (0), (1), (0), (0), (0), (0), (0), (0); (0), (0), (0), ((sin(yaw)*(cos(yaw)*sin(roll) - cos(roll)*sin(pitch)*sin(yaw)))/cos(pitch) - (cos(yaw)*(sin(roll)*sin(yaw) + cos(roll)*cos(yaw)*sin(pitch)))/cos(pitch))*(bg_y - wm_y) + ((sin(yaw)*(cos(roll)*cos(yaw) + sin(pitch)*sin(roll)*sin(yaw)))/cos(pitch) - (cos(yaw)*(cos(roll)*sin(yaw) - cos(yaw)*sin(pitch)*sin(roll)))/cos(pitch))*(bg_z - wm_z), - (bg_z - wm_z)*(cos(roll)*cos(yaw)^2 + cos(roll)*sin(yaw)^2 + (cos(yaw)*sin(pitch)*(sin(roll)*sin(yaw) + cos(roll)*cos(yaw)*sin(pitch)))/cos(pitch)^2 - (sin(pitch)*sin(yaw)*(cos(yaw)*sin(roll) - cos(roll)*sin(pitch)*sin(yaw)))/cos(pitch)^2) - (bg_y - wm_y)*(cos(yaw)^2*sin(roll) + sin(roll)*sin(yaw)^2 - (cos(yaw)*sin(pitch)*(cos(roll)*sin(yaw) - cos(yaw)*sin(pitch)*sin(roll)))/cos(pitch)^2 + (sin(pitch)*sin(yaw)*(cos(roll)*cos(yaw) + sin(pitch)*sin(roll)*sin(yaw)))/cos(pitch)^2), (0), (0), (0), (0), - cos(yaw)^2 - sin(yaw)^2, (cos(yaw)*(cos(roll)*sin(yaw) - cos(yaw)*sin(pitch)*sin(roll)))/cos(pitch) - (sin(yaw)*(cos(roll)*cos(yaw) + sin(pitch)*sin(roll)*sin(yaw)))/cos(pitch), ((sin(yaw)*(cos(yaw)*sin(roll) - cos(roll)*sin(pitch)*sin(yaw)))/cos(pitch) - (cos(yaw)*(sin(roll)*sin(yaw) + cos(roll)*cos(yaw)*sin(pitch)))/cos(pitch)), (0), (0), (0); (0), (0), (0), (bg_y - wm_y)*(cos(yaw)*(cos(yaw)*sin(roll) - cos(roll)*sin(pitch)*sin(yaw)) + sin(yaw)*(sin(roll)*sin(yaw) + cos(roll)*cos(yaw)*sin(pitch))) + (bg_z - wm_z)*(cos(yaw)*(cos(roll)*cos(yaw) + sin(pitch)*sin(roll)*sin(yaw)) + sin(yaw)*(cos(roll)*sin(yaw) - cos(yaw)*sin(pitch)*sin(roll))), (0), (0), (0), (0), (0), (0), - cos(yaw)*(cos(roll)*cos(yaw) + sin(pitch)*sin(roll)*sin(yaw)) - sin(yaw)*(cos(roll)*sin(yaw) - cos(yaw)*sin(pitch)*sin(roll)), (cos(yaw)*(cos(yaw)*sin(roll) - cos(roll)*sin(pitch)*sin(yaw)) + sin(yaw)*(sin(roll)*sin(yaw) + cos(roll)*cos(yaw)*sin(pitch))), (0), (0), (0); (0), (0), (0), (bg_z - wm_z)*(cos(pitch)*sin(roll) - (cos(yaw)*sin(pitch)*(cos(roll)*sin(yaw) - cos(yaw)*sin(pitch)*sin(roll)))/cos(pitch) + (sin(pitch)*sin(yaw)*(cos(roll)*cos(yaw) + sin(pitch)*sin(roll)*sin(yaw)))/cos(pitch)) - (bg_y - wm_y)*(cos(pitch)*cos(roll) + (cos(yaw)*sin(pitch)*(sin(roll)*sin(yaw) + cos(roll)*cos(yaw)*sin(pitch)))/cos(pitch) - (sin(pitch)*sin(yaw)*(cos(yaw)*sin(roll) - cos(roll)*sin(pitch)*sin(yaw)))/cos(pitch)), - (bg_z - wm_z)*(cos(yaw)*(sin(roll)*sin(yaw) + cos(roll)*cos(yaw)*sin(pitch)) - cos(roll)*sin(pitch) - sin(yaw)*(cos(yaw)*sin(roll) - cos(roll)*sin(pitch)*sin(yaw)) + cos(roll)*cos(yaw)^2*sin(pitch) + cos(roll)*sin(pitch)*sin(yaw)^2 + (cos(yaw)*sin(pitch)^2*(sin(roll)*sin(yaw) + cos(roll)*cos(yaw)*sin(pitch)))/cos(pitch)^2 - (sin(pitch)^2*sin(yaw)*(cos(yaw)*sin(roll) - cos(roll)*sin(pitch)*sin(yaw)))/cos(pitch)^2) - (bg_y - wm_y)*(sin(yaw)*(cos(roll)*cos(yaw) + sin(pitch)*sin(roll)*sin(yaw)) - cos(yaw)*(cos(roll)*sin(yaw) - cos(yaw)*sin(pitch)*sin(roll)) - sin(pitch)*sin(roll) + cos(yaw)^2*sin(pitch)*sin(roll) + sin(pitch)*sin(roll)*sin(yaw)^2 - (cos(yaw)*sin(pitch)^2*(cos(roll)*sin(yaw) - cos(yaw)*sin(pitch)*sin(roll)))/cos(pitch)^2 + (sin(pitch)^2*sin(yaw)*(cos(roll)*cos(yaw) + sin(pitch)*sin(roll)*sin(yaw)))/cos(pitch)^2) - (bg_x - wm_x)*(cos(pitch)*cos(yaw)^2 + cos(pitch)*sin(yaw)^2 - cos(pitch)), (0), (0), (0), (0), - sin(pitch)*cos(yaw)^2 - sin(pitch)*sin(yaw)^2 + sin(pitch), (cos(yaw)*sin(pitch)*(cos(roll)*sin(yaw) - cos(yaw)*sin(pitch)*sin(roll)))/cos(pitch) - cos(pitch)*sin(roll) - (sin(pitch)*sin(yaw)*(cos(roll)*cos(yaw) + sin(pitch)*sin(roll)*sin(yaw)))/cos(pitch), (sin(pitch)*sin(yaw)*(cos(yaw)*sin(roll) - cos(roll)*sin(pitch)*sin(yaw)))/cos(pitch) - (cos(yaw)*sin(pitch)*(sin(roll)*sin(yaw) + cos(roll)*cos(yaw)*sin(pitch)))/cos(pitch) - cos(pitch)*cos(roll), (0), (0), (0); (0), (0), (0), (am_y - ba_y)*(sin(roll)*sin(yaw) + cos(roll)*cos(yaw)*sin(pitch)) + (am_z - ba_z)*(cos(roll)*sin(yaw) - cos(yaw)*sin(pitch)*sin(roll)), cos(pitch)*cos(roll)*cos(yaw)*(am_z - ba_z) - cos(yaw)*sin(pitch)*(am_x - ba_x) + cos(pitch)*cos(yaw)*sin(roll)*(am_y - ba_y), (am_z - ba_z)*(cos(yaw)*sin(roll) - cos(roll)*sin(pitch)*sin(yaw)) - (am_y - ba_y)*(cos(roll)*cos(yaw) + sin(pitch)*sin(roll)*sin(yaw)) - cos(pitch)*sin(yaw)*(am_x - ba_x), (0), (0), (0), (0), (0), (0), -cos(pitch)*cos(yaw), (cos(roll)*sin(yaw) - cos(yaw)*sin(pitch)*sin(roll)), - sin(roll)*sin(yaw) - cos(roll)*cos(yaw)*sin(pitch); (0), (0), (0), - (am_y - ba_y)*(cos(yaw)*sin(roll) - cos(roll)*sin(pitch)*sin(yaw)) - (am_z - ba_z)*(cos(roll)*cos(yaw) + sin(pitch)*sin(roll)*sin(yaw)), cos(pitch)*cos(roll)*sin(yaw)*(am_z - ba_z) - sin(pitch)*sin(yaw)*(am_x - ba_x) + cos(pitch)*sin(roll)*sin(yaw)*(am_y - ba_y), (am_z - ba_z)*(sin(roll)*sin(yaw) + cos(roll)*cos(yaw)*sin(pitch)) - (am_y - ba_y)*(cos(roll)*sin(yaw) - cos(yaw)*sin(pitch)*sin(roll)) + cos(pitch)*cos(yaw)*(am_x - ba_x), (0), (0), (0), (0), (0), (0), -cos(pitch)*sin(yaw), - cos(roll)*cos(yaw) - sin(pitch)*sin(roll)*sin(yaw), (cos(yaw)*sin(roll) - cos(roll)*sin(pitch)*sin(yaw)); (0), (0), (0), cos(pitch)*cos(roll)*(am_y - ba_y) - cos(pitch)*sin(roll)*(am_z - ba_z), - cos(pitch)*(am_x - ba_x) - cos(roll)*sin(pitch)*(am_z - ba_z) - sin(pitch)*sin(roll)*(am_y - ba_y), (0), (0), (0), (0), (0), (0), (0), sin(pitch), -cos(pitch)*sin(roll), -cos(pitch)*cos(roll); (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0); (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0); (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0); (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0); (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0); (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0)];
Ut = [(0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0); (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0); (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0); - cos(yaw)^2 - sin(yaw)^2, (cos(yaw)*(cos(roll)*sin(yaw) - cos(yaw)*sin(pitch)*sin(roll)))/cos(pitch) - (sin(yaw)*(cos(roll)*cos(yaw) + sin(pitch)*sin(roll)*sin(yaw)))/cos(pitch), (sin(yaw)*(cos(yaw)*sin(roll) - cos(roll)*sin(pitch)*sin(yaw)))/cos(pitch) - (cos(yaw)*(sin(roll)*sin(yaw) + cos(roll)*cos(yaw)*sin(pitch)))/cos(pitch), (0), (0), (0), (0), (0), (0), (0), (0), (0); (0), - cos(yaw)*(cos(roll)*cos(yaw) + sin(pitch)*sin(roll)*sin(yaw)) - sin(yaw)*(cos(roll)*sin(yaw) - cos(yaw)*sin(pitch)*sin(roll)), cos(yaw)*(cos(yaw)*sin(roll) - cos(roll)*sin(pitch)*sin(yaw)) + sin(yaw)*(sin(roll)*sin(yaw) + cos(roll)*cos(yaw)*sin(pitch)), (0), (0), (0), (0), (0), (0), (0), (0), (0); - sin(pitch)*cos(yaw)^2 - sin(pitch)*sin(yaw)^2 + sin(pitch), (cos(yaw)*sin(pitch)*(cos(roll)*sin(yaw) - cos(yaw)*sin(pitch)*sin(roll)))/cos(pitch) - cos(pitch)*sin(roll) - (sin(pitch)*sin(yaw)*(cos(roll)*cos(yaw) + sin(pitch)*sin(roll)*sin(yaw)))/cos(pitch), (sin(pitch)*sin(yaw)*(cos(yaw)*sin(roll) - cos(roll)*sin(pitch)*sin(yaw)))/cos(pitch) - (cos(yaw)*sin(pitch)*(sin(roll)*sin(yaw) + cos(roll)*cos(yaw)*sin(pitch)))/cos(pitch) - cos(pitch)*cos(roll), (0), (0), (0), (0), (0), (0), (0), (0), (0); (0), (0), (0), -cos(pitch)*cos(yaw), (cos(roll)*sin(yaw) - cos(yaw)*sin(pitch)*sin(roll)), - sin(roll)*sin(yaw) - cos(roll)*cos(yaw)*sin(pitch), (0), (0), (0), (0), (0), (0); (0), (0), (0), -cos(pitch)*sin(yaw), - cos(roll)*cos(yaw) - sin(pitch)*sin(roll)*sin(yaw), (cos(yaw)*sin(roll) - cos(roll)*sin(pitch)*sin(yaw)), (0), (0), (0), (0), (0), (0); (0), (0), (0), sin(pitch), -cos(pitch)*sin(roll), -cos(pitch)*cos(roll), (0), (0), (0), (0), (0), (0); (0), (0), (0), (0), (0), (0), (1), (0), (0), (0), (0), (0); (0), (0), (0), (0), (0), (0), (0), (1), (0), (0), (0), (0); (0), (0), (0), (0), (0), (0), (0), (0), (1), (0), (0), (0); (0), (0), (0), (0), (0), (0), (0), (0), (0), (1), (0), (0); (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (1), (0); (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (0), (1)];
Ft = eye(15,15) + dt* At;
Vt  = Ut;
Qd = eye(12,12) * 0.12 * dt;

uEst  = uPrev + dt* x_dot;
covarEst = Ft* covarPrev * (Ft)' + Vt* Qd * Vt';
 
end