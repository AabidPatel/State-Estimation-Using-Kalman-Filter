function [Vel] = velocityRANSAC(optV,optPos,Z,R_c2w,e)
%% CHANGE THE NAME OF THE FUNCTION TO velocityRANSAC
    %% Input Parameter Description
    % optV = The optical Flow
    % optPos = Position of the features in the camera frame 
    % Z = Height of the drone
    % R_c2w = Rotation defining camera to world frame
    % e = RANSAC hyper parameter    
    
    %% Output Parameter Description
    % Vel = Linear velocity and angualr velocity vector
    ps = 0.99;
    k = round(log(1-ps)/log(1 - 0.9^3));
    m_inliers = 0;
    m_thresh = e;
    inlier_p = [];
    optV_inliers = [];
    for i = 1:k
      random_index = randi([1 length(optPos)], 3,1);
      optPos_rand = optPos(random_index,:); 
      optVel_rand = optV(random_index,:);
      optVel_rand = reshape(optVel_rand',[6,1]);
      a = [];
      b = [];
      for j = 1:3
          a = [a; -1 0 optPos_rand(j,1); 
              0 -1 optPos_rand(j,2)]/Z;
          b = [b; optPos_rand(j,1)*optPos_rand(j,2) -(1+optPos_rand(j,1)^2) optPos_rand(j,2); 
              1+optPos_rand(j,2)^2 -optPos_rand(j,1)*optPos_rand(j,2) -optPos_rand(j,1)];
      end
      H_rand = [a b];
      H_rand_pseudo = pinv(H_rand);
      Vel_rand = H_rand_pseudo*optVel_rand;
      At = zeros(2,3);
      Bt = zeros(2,3);
      inlier_pt = [];
      Z_inlier_pt = [];
      optVinliers_t = [];
      num_inliers = 0;
      for j = 1:size(optPos,1)
        At(1:2,:) = [-1 0 optPos(j,1); 0 -1 optPos(j,2)]/Z;
        Bt(1:2,:) = [optPos(j,1)*optPos(j,2) -(1+optPos(j,1)^2) optPos(j,2); 
            1+optPos(j,2)^2 -optPos(j,1)*optPos(j,2) -optPos(j,1)];
        error = abs(At*Vel_rand(1:3) + Bt*Vel_rand(4:6) - [optV(j,1);optV(j,2);]);
        if (error <= m_thresh)
            num_inliers = num_inliers + 1;
            inlier_pt(num_inliers,1:2) = [optPos(j,1) optPos(j,2)];
            Z_inlier_pt(num_inliers) = Z;
            optVinliers_t(num_inliers,1:2) = [optV(j,1) optV(j,2)];
        end
      end
      if (num_inliers > m_inliers)
          m_inliers = num_inliers;
          inlier_p = inlier_pt;
          optV_inliers = optVinliers_t;
      end
    end
    A = [];
    B = [];
    for i = 1:m_inliers
        A = [A; -1 0 inlier_p(i,1); 0 -1 inlier_p(i,2)]/Z;
        B = [B; inlier_p(i,1)*inlier_p(i,2) -(1+inlier_p(i,1)^2) inlier_p(i,2); 
            1+inlier_p(i,2)^2 -inlier_p(i,1)*inlier_p(i,2) -inlier_p(i,1)];
    end
    H = [A B];
    H_pseudo = pinv(H);
    optVel = optV_inliers;
    optV = reshape(optVel',[2*size(optVel,1),1]);
    s = [0 0.03 0; -0.03 0 0.04; 0 -0.04 0;];
    Vel_cwc = H_pseudo*optV;
    Vel = [R_c2w' -R_c2w'*s;zeros(3,3) R_c2w';]*(Vel_cwc);
end